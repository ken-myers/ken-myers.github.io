<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-08-13T15:47:09-05:00</updated><id>http://localhost:4000/feed.xml</id><entry><title type="html">Stellar Cartography With Self Organizing Maps</title><link href="http://localhost:4000/posts/starmaps" rel="alternate" type="text/html" title="Stellar Cartography With Self Organizing Maps" /><published>2020-09-01T00:00:00-05:00</published><updated>2020-09-01T00:00:00-05:00</updated><id>http://localhost:4000/posts/starmaps</id><content type="html" xml:base="http://localhost:4000/posts/starmaps"><![CDATA[<div class="imgCont">
    
        <img src="/assets/images/starmapPretty.png" class="clickToModal postImage" style="width:800px;" />
        
        
        <p class="imgCaption" style="width:800px;">Distance optimized map of the 10 closest stars to Earth, Sol included. This one has an average error of around 8.9%.</p>
    
 
</div>

<p>There was something of a family debate over whether a reduced-dimensionality starmap could still be accurate enough as to be useful, so I made a covid-quarantine experiment of it.</p>

<h2 id="process">Process</h2>
<p>The idea is pretty simple: create a 2D starmap in which the distances between each star are as accurate as possible.</p>

<div class="imgCont">
    
        <img src="/assets/images/starGenDemo.gif" class="clickToModal postImage" style="width:525px;" />
        
        
        <p class="imgCaption" style="width:525px;">Generation of a map of our 30 nearest stars.</p>
    
 
</div>

<p>I tried to implement something like a <a href="https://en.wikipedia.org/wiki/Self-organizing_map">Kohonen map</a>. I’m not sure if it actually falls under that name, but it does follow the same principles of iteratively changing the position of each node towards a more ideal state, which in this case would be one in which the distances between each pair on the board are most accurate. Here’s my algorithm:</p>

<ul>
  <li>Randomly initialize each item’s position.</li>
  <li>Repeat the following n times or until convergence:
    <ul>
      <li>For each item in the dataset:
        <ol>
          <li>Calculate and store the average pairwise error (discrepancy between true distance and distance on the map) between the given item and all other items.</li>
          <li>Shift the item’s position by a certain increment in both directions on each axis, calculating and storing the item’s average error for each possible move.</li>
          <li>Commit the move which yields the lowest error, and move onto the next item.</li>
        </ol>
      </li>
      <li>If the average error of the whole map has not changed since last iteration, either
        <ul>
          <li>Decrease the increment size if the results will still be significant, or otherwise</li>
          <li>Stop. The map’s error has converged.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>A few nuances have been glossed over in this overview. You can view the full code on <a href="https://github.com/ken-myers/stargen">my Github</a>.</p>

<h2 id="results">Results</h2>

<p>One of the principal arguments against the usability of these maps was that “it’s like putting cities in a line.” I made sure to generalize my code for data of any dimension and fed it the largest 20 cities in Texas. If you’re from around here, I think you’d agree with me that this map looks like it’d be helpful to any one-dimensional creatures attempting to traverse the state.</p>

<div class="imgCont">
    
    <div class="scrollWrapper">
    
        <img src="/assets/images/linearCities.png" class="clickToModal postImage" style="" />
        
    </div>
    
        
        <p class="imgCaption">The 20 largest cities in Texas plotted linearly, optimized for distance. (The Metroplex is a bit clustered, as expected.)</p>
    
 
</div>

<p>Here are a few more of the starmaps I’ve generated, without any post-processing. (You can click on any of these to view them in more detail.)</p>

<div class="flexrow flexrow4">
<div class="imgCont">
    
        <img src="/assets/images/starmap10.png" class="clickToModal postImage" style="" />
        
        
        <p class="imgCaption">10 nearest stars. Average error of about 8.88%</p>
    
 
</div>
<div class="imgCont">
    
        <img src="/assets/images/starmap20.png" class="clickToModal postImage" style="" />
        
        
        <p class="imgCaption">20 nearest stars. Average error of about 13.2%</p>
    
 
</div>
<div class="imgCont">
    
        <img src="/assets/images/starmap50.png" class="clickToModal postImage" style="" />
        
        
        <p class="imgCaption">50 nearest stars. Average error of about 16.4%</p>
    
 
</div>
<div class="imgCont">
    
        <img src="/assets/images/starmap100.png" class="clickToModal postImage" style="" />
        
        
        <p class="imgCaption">100 nearest stars. Average error of about 16.0%</p>
    
 
</div>
</div>

<p>As for the error indication, the blue lines represent specific distances that are over a user-inputted threshold (in this case, 85%), the red text simply lists the average error of all distances involving the given star, and the red halos are proportional to said error. All of this is toggle-able.</p>

<p>Something to note is that these maps are quite sensitive to initial conditions, so you may have to re-roll a few times until you get a map you’re happy with. In my experience, the average map error for a given dataset could fall anywhere between 10-30%, but I’m sure this number changes when you’re working with something other than stars or cities.</p>

<h2 id="beyond-starmaps">Beyond Starmaps</h2>

<p>Even though the code is capable, there’s not much use in stepping down higher-dimensional data to one, two, or three dimensions because, since it is primarily intended to be used as a cartography tool, my program does not normalize the data you feed it, and uniform higher dimensional coordinates are hard to come by. (If you were, say, a novelist trying to world-build a universe in which there were seven spatial dimensions, then yes, it could be useful.)</p>

<p>I intend to continue working on this project. Besides the obvious refactoring, bug-squashing, and polishing, I’d also like to add support for wrap-around/toroidal space and perhaps globular, a GUI that shows live generation (like the GIF you saw earlier), and the ability to import CSV files.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Distance optimized map of the 10 closest stars to Earth, Sol included. This one has an average error of around 8.9%.]]></summary></entry></feed>